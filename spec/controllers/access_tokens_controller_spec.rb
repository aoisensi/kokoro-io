require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe AccessTokensController, :type => :controller do
  before do
    session[:user_id] = user.id
  end

  # This should return the minimal set of attributes required to create a valid
  # AccessToken. As you add validations to AccessToken, be sure to
  # adjust the attributes here as well.
  let(:user) { FactoryGirl.create(:user) }
  let(:valid_attributes) {
    {
      user_id: user.id,
      name: 'hi',
      token: 'token'
    }
  }

  let(:invalid_attributes) {
    {
      user_id: user.id,
      name: ''
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AccessTokensController. Be sure to keep this updated too.
  let(:valid_session) {
  }

  describe "GET index" do
    it "assigns all access_tokens as @access_tokens" do
      access_token = AccessToken.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:access_tokens)).to eq([access_token])
    end
  end

  describe "GET show" do
    it "assigns the requested access_token as @access_token" do
      access_token = AccessToken.create! valid_attributes
      get :show, {:id => access_token.to_param}, valid_session
      expect(assigns(:access_token)).to eq(access_token)
    end
  end

  describe "GET new" do
    it "assigns a new access_token as @access_token" do
      get :new, {}, valid_session
      expect(assigns(:access_token)).to be_a_new(AccessToken)
    end
  end

  describe "GET edit" do
    it "assigns the requested access_token as @access_token" do
      access_token = AccessToken.create! valid_attributes
      get :edit, {:id => access_token.to_param}, valid_session
      expect(assigns(:access_token)).to eq(access_token)
    end
  end

  # describe "POST create" do
  #   describe "with valid params" do
  #     it "creates a new AccessToken" do
  #       expect {
  #         post :create, {:access_token => valid_attributes}, valid_session
  #       }.to change(AccessToken, :count).by(1)
  #     end
  #
  #     it "assigns a newly created access_token as @access_token" do
  #       post :create, {:access_token => valid_attributes}, valid_session
  #       p assigns(:access_token)
  #       expect(assigns(:access_token)).to be_a(AccessToken)
  #       expect(assigns(:access_token)).to be_persisted
  #     end
  #
  #     it "redirects to the created access_token" do
  #       post :create, {:access_token => valid_attributes}, valid_session
  #       expect(response).to redirect_to(AccessToken.last)
  #     end
  #   end
  #
  #   describe "with invalid params" do
  #     it "assigns a newly created but unsaved access_token as @access_token" do
  #       post :create, {:access_token => invalid_attributes}, valid_session
  #       expect(assigns(:access_token)).to be_a_new(AccessToken)
  #     end
  #
  #     it "re-renders the 'new' template" do
  #       post :create, {:access_token => invalid_attributes}, valid_session
  #       expect(response).to render_template("new")
  #     end
  #   end
  # end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        {
          name: 'hi2'
        }
      }

      it "updates the requested access_token" do
        access_token = AccessToken.create! valid_attributes
        put :update, {:id => access_token.to_param, :access_token => new_attributes}, valid_session
        access_token.reload
        expect(assigns(:access_token).name).to eq('hi2')
      end

      it "assigns the requested access_token as @access_token" do
        access_token = AccessToken.create! valid_attributes
        put :update, {:id => access_token.to_param, :access_token => valid_attributes}, valid_session
        expect(assigns(:access_token)).to eq(access_token)
      end

      it "redirects to the access_token" do
        access_token = AccessToken.create! valid_attributes
        put :update, {:id => access_token.to_param, :access_token => valid_attributes}, valid_session
        expect(response).to redirect_to(access_token)
      end
    end

    describe "with invalid params" do
      before do
        AccessToken.create! user: user, name: 'wow', token: 'exist'
      end
      render_views
      it "assigns the access_token as @access_token" do
        access_token = AccessToken.create! valid_attributes
        put :update, {:id => access_token.to_param, :access_token => invalid_attributes}, valid_session
        expect(assigns(:access_token)).to eq(access_token)
      end

      it "re-renders the 'edit' template" do
        access_token = AccessToken.create! valid_attributes
        put :update, {:id => access_token.to_param, :access_token => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested access_token" do
      access_token = AccessToken.create! valid_attributes
      expect {
        delete :destroy, {:id => access_token.to_param}, valid_session
      }.to change(AccessToken, :count).by(-1)
    end

    it "redirects to the access_tokens list" do
      access_token = AccessToken.create! valid_attributes
      delete :destroy, {:id => access_token.to_param}, valid_session
      expect(response).to redirect_to(access_tokens_url)
    end
  end

end
